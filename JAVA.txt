[ 자바 구동 원리 ]
    1. 개발자는 .java 파일내 자바 문법 작성한다.
    - Example1.java ( 파일 )
    2. [실행] .java 파일 -> 컴파일(번역/해석) -> .class 파일(바이트) 생성
    3. [처리] (컴퓨터가) .class 파일 처리한다.
    ( 자바언어/ .java )


[ 주석 ]
    JavaScript랑 똑같이 //(한 줄), /* */(여러 줄)로 표현.


[ 자바 활용처 ]
    1. 소프트웨어 : JavaFx툴 활용하여 개발 가능
    2. 웹 : JSP, Spring 등
    3. 앱 : 안드로이드 등등


[ 자바 코드 실행 ]
    자바는 클래스 단위로 컴파일 되고, 컴파일된 코드는 main함수부터 읽어서(스레드) 처리한다.


[ 리터럴 ]
    - 3 , 100 , 3.14 , 'a' , "ABC" , true 등등
    1. 정의 : 키보드로 부터 입력한 자료
    2. 종류
        정수(int) , 실수(double) , 문자(char '') , 문자열(String "") , 논리(boolean)


[ 기본타입 ]
    1. 정의 : 자료들의 분류
    2. 목적 : 효율적인 자료 처리 (*분리수거)
    3. 종류(8가지)
        [정수]       byte        1바이트        -128 ~ 0 ~ +127
                    short       2바이트        +-약 3만
                    int         4바이트        +-약 21억 (*리터럴)
                    long        8바이트        +-21억 이상 , 리터럴정수 뒤에 L/l 붙여야함
        [실수]       float       4바이트        소수점 8자리 표현 , 리터럴 실수 뒤에 F/f 붙이기
                    double      8바이트        소수점 17자리 표현(*리터럴실수)
        [논리]       boolean     1바이트        true/false
        [문자]       char        2바이트        유니코드 , '' 작은따옴표 감싼 문자 1개
                    String      문자개수        클래스 , "" 큰따옴표 감싼 문자여러개


[ 출력함수 ]
    1. System.out.print()                                   : 출력
    2. System.out.println()                                 : 출력후 줄바꿈
    3. System.out.printf( "형식문자1 형식문자2" , 값1 , 값2 )   : 서식(형식) 맞춤 출력
        - 형식문자 : %s문자열 , %d정수 , %c문자 , %f실수
        - 자릿수 :
            %자릿수d : 자릿수만큼 자릿수 차지 , 만일 비어있으면 공백 , 오른쪽 정렬
            %-자릿수d : 자릿수만큼 자릿수 차지 , 만일 비어있으면 공백 , 왼쪽 정렬
            %0자릿수d : 자릿수만큼 자릿수 차지 , 만일 비어있으면 0채움
        - 소수점 자릿수 :
            %전체자릿수.소수점자릿수f : (소수점포함)전체 자릿수 만큼 자릿수 차지

[ 이스케이프/제어 문자 ] : 특수문자에 기능이 포함
    \n : 줄바꿈 , \t 들여쓰기 , \\ 백슬래시 출력 , \' 작은따옴표 출력 , \" 큰따옴표 출력

[ (변수)타입변환 ] , **다형성**
    1. 자동(묵시적) 타입변환
        (1) byte -> short/char -> int -> long -> float -> double
        (2) 메모리 크기가 작은 것에서 큰 것으로 변환 가능!
        (3) 연산결과
            - 두 항 중에 더 큰 항의 타입으로 결과 반환
            - 단] int 이하는 무조건 int 반환
        ex)
        byte b1 = 3;
        int i1 = b1;

    2. 강제(명시적) 타입변환
        (1) double -> float -> long -> int -> short/char -> byte
        (2) 메모리 크기가 큰 것에서 작은 것으로 변환 가능!
        (3) (변환할타입명)변수명;
        (4) !! 자료 손실 발생 가능성 있음. (ex : 실수에서 정수로 바꾸면 소수점 날아감)


[ 입력함수 ]
    1. 콘솔 화면에서 키보드로부터 입력받는 방법
    2. 사용법
        (1) 입력객체 생성 : new Scanner( System.in );
            Scanner scan(변수명) = new Scanner( System.in );
            * 주의할 점 : Scanner 입력 시 자동완성 권장. 안할 경우 : 클래스 위에 import java.util.Scanner; 직접 작성
            * import란 다른 클래스(코드정보) 호출
        (2) 입력함수
            .next()             : 입력받은 자료를 문자열(String) 반환 , 띄어쓰기 안 됨
            .nextLine()         : 입력받은 자료를 문자열(String) 반환 , 띄어쓰기 가능 , nextLine() 앞에 다른 next() 존재할 경우, 무의미한 nextLine() 하나 써줘야함.
            .nextByte()         : 입력받은 자료를 정수(byte) 반환
            .nextShort()        : 입력받은 자료를 정수(short) 반환
            .nextInt()          : 입력받은 자료를 정수(int) 반환
            .nextFloat()        : 입력받은 자료를 실수(float) 반환
            .nextDouble()       : 입력받은 자료를 실수(double) 반환
            .nextBoolean()      : 입력받은 자료를 논리(boolean) 반환
            .next().charAt(0);  : 입력받은 자료를 문자(char)로 첫 번째 글자만 반환


[ 연산자 ]
    1. 산술연산자 : +더하기 -빼기 *곱하기 /나누기 %나머지
    2. 연결연산자 : +연결(피연산자 중 문자 포함되면, 더하기 대신 연결이 됨)
    3. 비교연산자 : >초과 >=이상 <미만 <=이하 == 같다 !=같지않다 (JS처럼 강력비교가 없다. 이미 int, boolean 등 타입이 명시되어있기 때문에.)
    4. 논리연산자 : &&이면서 ||이거나 !부정
    5. 증감연산자 : ++변수명 변수명++ --변수명 변수명--
    6. 복합대입연산자 : =대입 +=더한후대입 연산후대입(+= *= -= /= %=)
    7. 삼항연산자 : 조건 ? 참 : 거짓 , 중첩가능(조건 ? 참 : 조건 ? 참 : 거짓) 등
    8. 문자열비교 : "문자열A".equals("문자열B");


[ 조건문 ]
    1. 조건에 따른 결과(true/false)의 코드 흐름 제어 ,
        * 지갑의 돈이 3000원 이상이면 택시탄다. 아니면 걸어간다.
        - 지갑의돈 >= 3000 -> true or false
        - 삼항연산자    1) 지갑의돈 >= 3000 ? "택시탄다" : "걸어간다"
        - 조건문       2) if( 지갑의돈 >= 3000 ) { "택시탄다"; }else{ "걸어간다"; }
    2. 종류)
                    (1) if( 조건문 ) 참일때명령어;

                    (2) if( 조건문 ) {
                            참일때명령어1;
                            참일때명령어2;
                        }

                    (3) if( 조건문 ) {
                            참일때명령어1;
                        } else {
                            거짓일때명령어;
                        }

                    (4) if( 조건문1 ) {
                            참1일때명령어;
                        } else if( 조건문2 ) {
                            참2일때명령어;
                        } else if( 조건문2 ) {
                            참3일때명령어;
                        } else {
                            거짓일때명령어;
                        }

                    (5) if( 조건문1 ) { 참1일때명령어; }
                        if( 조건문2 ) { 참2일때명령어; }
                        if( 조건문3 ) { 참3일때명령어; }

                    (6) if( 조건문1 ) {
                            if( 조건문2 ) { }
                            else{ }
                        } else {

                        }

[ 배열 ]
    1. 정의 : *동일한* 자료형(타입)의 여러개 자료들을 순서대로 저장하는 자료의 타입
    2. 특징
        1) 동일한 타입 : 서로 다른 자료형(타입) 데이터는 같은 배열에 저장 불가능하다.
        2) *고정 길이* : 배열은 한 번 선언(생성)되면 길이/크기/요소 개수 수정 할 수 없다. < 요소 추가/삭제 없음. >
        3) 요소 기본값 : 배열내 요소의 초기값이 없으면 자동으로 기본값
            - 정수 : 0 , 실수 : 0.0 , 논리 : false , 객체, 배열, String : null
        4) 인덱스 : 배열내 저장된 요소들의 순서번호 , 0번 시작
    3. 사용법
        1) 선언/생성
            (1) new 타입[길이];             , int[] 변수명 = new int[3];
            (2) { 값1, 값2, 값3 }          , double[] 변수명 = { 3.14 , 5.1 , 78.62 }
        2) 호출
            (1) 변수명                     , 배열의 주소값 반환
            (2) Arrays.toString( 변수명 ); , 배열내 요소 값들을 문자열로 반환
            (3) 변수명[인덱스]               , 배열내 특정한 요소 값 반환
            (4) 변수명.length              , 배열내 요소 개수 반환
        3) 요소 추가/삭제 없음.
        4) 배열과 반복문
            (1) 일반 for문 : 인덱스가 있는 배열내 요소값들을 하나씩 순회
                for( int i = 0; i <= 배열변수명.length - 1; i++ ){

                }
            (2) 향상된 for문 : 인덱스 없이 배열내 요소값들을 하나씩 순회
                for ( 타입 반복변수명 : 배열변수명){

                }
                ex)
                for ( int score : scores) { }

[ 클래스와 객체 ] * 자바는 컴파일(번역)을 클래스 단위로 처리한다.
    1. 정의
        1) 객체        :  '주체'가 아닌 의사나 행위를 미치는 대상.
        2) 클래스      :  객체를 만들기 위한 객체 정의하는 *설계도*
    2. 클래스 멤버
        1) 멤버변수    :   객체내 포함할 변수 , 속성/특징/성질   = 값/데이터
        2) 메소드      :   객체내 포함할 함수 , 이벤트/행위/작동  = 실행명령어집합
        3) 생성자      :   객체가 생성될 때 초기화함수 , 초기화
    3. 클래스 사용법
        1) 선언하는 방법 : (1) .java파일내 여러개 클래스 선언[비권장] (2) .java파일내 클래스는 1개 존재[*권장*]
            class 클래스명{
                멤버변수;
                메소드;
                생성자;
            }
    4. 객체 사용법
        1) 객체 선언하는 방법
            new 클래스명();             ,   클래스명 변수명 = new 클래스명();
            * new 연산자 : 클래스 기반으로 객체를 생성하며 메모리를 할당하는 키워드
        2) 객체내 멤버변수 호출
            변수명.멤버변수명
            * . 접근연산자 : 객체내 포함된 멤버변수 , 메소드 등 접근하는 키워드
        3) 객체내 멤버변수 값 수정
            변수명.멤버변수명 = 새로운값
        4) 객체내 멤버변수 추가/삭제 불가능 : 클래스는 컴파일(실행/번역)된 이후에 추가/수정이 불가능

[ 메소드 : 기능 사용법 ]
    1. 정의 : 하나의 기능을 수행하는 일련의 명령어/코드들
        속성 = 값/데이터 저장 VS 함수 = 코드/명령어 저장
        멤버변수                메소드
        속성                   함수
        key = value
    2. 용어 :
        1) 인수/인자 값      : 메소드 호출시 메소드에게 전달되는 값
            예) 변수명.메소드명( *인수1* , *인수2* );
        2) 매개변수         : 메소드 실행될때 인수/인자 값을 대입받는 변수
            예) void 메소드명( 타입 매개변수1 , 타입 매개변수2 );
            *주의할점* : 1. 인자값과 매개변수의 타입 일치해야한다. 사용법 규칙 엄수.
                        2. 매개변수 없을수도 있다.
                        3. 지역변수 특징
        3) 반환값          : 메소드 종료될때 메소드를 호출했던 곳으로 되돌려주는 값
            예) return 반환값;

        4) 반환타입        : 반환값의 자료형/타입
            예) 반환타입 메소드명() { }
            -> 주의할점 : 1. 반환값과 반환타입의 타입 일치해야한다!!!
                        2. 반환값은 항상 자료 1개만 가능하다. 연산/함수
                        3. 반환값이 없을때는 void 타입의 키워드 사용한다.
    3. 사용법
        1) 정의/만들기
            반환타입 메소드명( 타입 매개변수1 , 타입 매개변수2 ...) {
                실행코드;
                return 반환값;
            }
        2) 호출/사용하기
            1) 호출하고자하는 메소드가 다른 클래스일때
                (1) 객체생성 : 클래스명 변수명 = new 클래스명();
                (2) 객체통해 메소드 호출 : 변수명.메소드명(인수1 , 인수2);
            2) 호출하고자 하는 메소드가 같은 클래스일때
                (1) 메소드명(인수1 , 인수2);

[ 생성자 ]
    1. 정의 : 객체(인스턴스)를 생성(new)할때 사용되는 초기화 메소드
    2. 규칙
        1) 클래스명과 생성자명은 동일하다.
        2) 오버로드 : 매개변수의 개수/타입/순서가 다르면 동일한 이름으로 여러개 선언
    3. 종류
        1) 기본생성자   : 매개변수 없는 생성자
            - 클래스내 생성자가 하나도 존재하지 않으면 컴파일(실행)될때 자동 생성
        2) 생성자      : 주로 매개변수 있는 생성자
            - 메소드와 다르게 반환타입/값 없다.
    4. 목적 : 객체 생성시 멤버변수에 빠른 초기화 혹은 유효성 검사( 규칙적인 초기화 )
    5. 사용법
        1) 선언방법
            class 클래스명{
                생성자명( ){ }
            }
        2) 호출/사용 방법
            클래스명 변수명 = new 생성자명();

[ 주요 키워드 ]
    1. 접근제한자 : 다른 클래스가 특정한 클래스에 접근할때 제한
        1) public           : *모든 클래스*에 접근 가능
        2) private          : *현재 클래스*에서만 접근 가능
        3) (default)        : 같은 *패키지*에서만 접근 가능 , 키워드는 생략
        4) protected        : 같은 *패키지*에서만 접근 가능 , 상속관계 예외
    2. 클래스 불러오기 , java.lang 패키지는 예외
        import              : 현재 클래스에서 다른 패키지의 클래스를 불러올때 / 라이브러리(남이만든클래스)
    3. 상수
        1) final            : 초기화(선언) 이후에 수정 불가능 상태
        2) static           : (전역변수) 프로그램 실행시 *우선 메모리할당* 되고 프로그램 종료될때 메모리삭제, (객체없이가능)

[ 관례적 ]
    1. getter and setter    : 멤버변수가 private으로 선언될 경우 다른 클래스로부터 간접접근 메소드
    2. public static final  : (상수) 프로그램내 딱 1개만 존재하는 값 선언할때 (ex : 대문자로 PI값 선언)

[ 구분할 용어들 ]
    1. 변수가 선언된 위치 또는 키워드에 따라 다르다.
        멤버변수 : 객체 속성( 메소드밖에 선언된 )
            class 클래스{ int a; }
        지역변수 : 메소드 안에서 선언된
            class 클래스{ void 메소드() { int a;} }
        매개변수 : 메소드 호출시 전달받은 인수/인자값 저장한 변수
            class 클래스{ void 메소드(int a){} }
        정적변수 : 멤버변수 앞에 static
            class 클래스{ static int a; }
        상수 :
            class 클래스{ public int a; }
    2.
        객체       : 속성과 기능을 구성하는 형태 (논리적 개념)
        클래스      : 객체를 생성하기 위한 설계도 (실체물X)
        인스턴스    : 속성과 기능이 생성된 형태 (물리적 개념) , new
            Car car1 = new Car();
            Car = 클래스/타입
            new Car() : 결과물이 인스턴스

[ 디자인 패턴 ]
    1. 패턴이란? : 되풀이되는 것.
    2. 디자인 패턴 : 소프트웨어 설계 과정에서 자주 발생하는 문제점/설계 유형
    3. 학습할 패턴 종류
        1) 싱글톤 패턴
        2) MVC 패턴
    4. 목적 : 여러 개발자들이 협업간에 관례적인 규칙(패턴)으로 개발의 효율성 높인다.

[ 싱글톤 ]
    1. 정의 : 프로그램내 객체(인스턴스)가 단 하나만 존재하는 설계
    2. 목적 : 하나의 객체(인스턴스)를 만들고 공유
        - 여러개의 객체가 존재하면 서로 다른 메모리를 사용하므로 공유하는데 제약이 있다.
        - 협업에 있어서 굳이 여러개 객체(인스턴스)가 필요 없는 경우가 있다.
    3. 싱글톤 만드는 방법
        단계1) 지정한 클래스에 기본 생성자를 private한다.
            private 생성자명(){}
        단계2) 지정한 클래스에 private static final으로 객체(인스턴스) 선언한다.
            private static final 클래스명 instance = new 생성자명();
        단계3) 지정한 클래스에 public static으로 getInstance 메소드 선언한다
            public static 클래스명 getInstance() {
                return instance;
            }
    4. 다른 클래스에서 싱글톤 호출하기.
        클래스명.getInstance();

[ MVC 패턴 ]
    1. 정의 : (웹/앱)소프트웨어 개발
    디자인패턴으로 세가지 주요 역할을 분리하여 코드의 모듈화(조각)와 유지보수 높인다.
    2. 목적 : 프로젝트 협업 간의 코드와 파일들을
    MVC패턴에 따라 구성하여 효율성을 높인다.
    3. 장점 : 유지보수, 모듈화, 단일기능책임 등
    4. 단점 : 분리함에 따라 관리 복잡도 높다.
    5. 예]
        (1) 1인식당 : 사장님이 혼자서 서빙하고 요리하고 재료 준비한다.
            (식당 규모가 커지면 감당 안 됨)
        (2) 직원이 있는 식당 : 서빙직원, 요리직원, 재료직원 역할 담당
            (담당자에게 빠른 문제 처리를 요구할 수 있다.)
    6. 사용처 : 다양한 실무 프레임워크(Spring)에서 권장하는 패턴이다.
    7. 레이어/계층
        V(view)         : 입출력 담당
            1) 주로 웹/앱에서는 HTML/CSS/JS/JSP/REACT/FLUTTER (프론트엔드)
            2) 사용자로부터 입력과 출력 받는다.
            3) 관례적인 규칙 ( console ) view클래스에서만 print함수와 scanner함수를 사용한다.
        C(controller)   : model과 view 사이의 제어/전달/유효성검사/로직 담당
            1) 주로 웹/앱에서는 JAVA/PYTHON/NODE.JS/ (백엔드)
            2) 사용자로부터(view) 요청을 받아 model에게 전달하고 처리 결과를 view에게 전달한다.
            3) 주요 키워드
                MVC1 패턴                 : JSP(controller + view) , model
                MVC2 패턴                 : controller , view , model
                MVC2 패턴 3티어(Spring)    : controller , service , view , model
        M(model)        : 데이터 관리 담당
            1) 주로 웹/앱에서는 JAVA/PYTHON/NODE.JS (백엔드) 이면서 외부 데이터베이스 서버와 통신
            2) 데이터베이스 상호작용
            3) 주요 키워드
                DAO( data access object )   : 데이터에 접근하는 객체      : ex] 물류 센터
                DTO( data transfer object)  : 데이터를 이동시키는 객체     : ex] 택시 기사
            4) 관례적인 규칙
                DTO는 데이터모델이므로 싱글톤을 사용하지 않는다.
    8. 레이어/계층 간의 흐름도
        [주문]
            주문 요청 : 콜라 하나 주세요. (정순으로 진행)
                사용자(view) --DTO--> controller --DTO--> model(DAO)
            주문 응답 : 콜라 하나 줄게요. (역순으로 진행)
                model(DAO) --DTO--> controller --DTO--> 사용자(view)
    9. 파일/폴더 MVC 기준 구분
        - 프로젝트 폴더
            - controller 폴더
                MemberController
                BoardController
            - model 폴더
                -> dao 폴더
                    MemberDao
                    BoardDao
                -> dto 폴더
                    MemberDao
                    BoardDao
            - view 폴더 * 추후에 HTML로 변경 된다.
                MemberView
                BoardView
            - AppStart 클래스

[ 상속 ] extends
    1. (상위) 클래스로부터 (하위) 클래스에게 (멤버변수/메소드)를 물려주는 행위
    2. 특징
        1) 하위 클래스가 객체(인스턴스) 생성하면 상위 클래스 객체(인스턴스)도 생성된다.
        2) **다형성**
            하위 클래스/타입에서 상위 클래스/타입으로 변환 가능 (자동타입변환)
            상위 클래스/타입에서 하위 클래스/타입으로 변환 가능 (강제타입변환)
    3. extends
        class 하위클래스 extends 상위클래스 { }

[ 인터페이스 ] implements
    1. 인터페이스로부터 클래스가 (추상메소드)를 물려받아 *구현*하는 행위
    2. 특징
        1) 인터페이스는 *상수 외 *추상메소드를 갖는다. 즉] 생성자 없어서 자체적으로 객체(인스턴스) 생성 불가능
        2) **다형성**
            (1) 인터페이스를 구현한 클래스/타입에서 인터페이스 타입으로 변환 가능 (자동타입변환)
    3. implements
        class 구현클래스 implements 인터페이스1 , 인터페이스2{ }

[ 다형성 ]
    1. 다양한 형태/타입 갖는 성질 , 값/객체를 변경하는게 아니다.
    2. 상속과 인터페이스로 표현
    3. @오버라이딩 : 상속 또는 인터페이스에서 물려받은 메소드를 재구현(상속) 또는 구현(인터페이스)하는 행위
        ** 타입간의 중복된 메소드가 존재할 경우 오버라이딩된 메소드가 최우선으로 실행된다.
    4. 확인
        객체 instanceof 타입

[ 인스턴스 ]
    1. 인스턴스(객체)는 클래스(설계도) 기반으로 메모리(컴퓨터저장소) 생성한다.
    2. 인스턴스(객체)마다의 멤버변수를 메모리에 각각 생성한다.
    3. 클래스의 메소드는 모든 인스턴스(객체) 공유한다.
    --------------------------------------------------------------
    클래스/정적(메모리)                             힙(메모리)
    class Member{
        int age :                               new Member : int age = 10;
        void event({

        }
    }                                           new Member : int age = 30;

[ 입출력 ] 입력 (컴퓨터 안으로) , 출력(컴퓨터 밖으로)
[ 파일 ] 컴퓨터에 사용되는 데이터들을 모아놓은 것
[ 스트림 ] 컴퓨터내 데이터/자료가 다니는 통로
    * 데이터가 다니는 통로인 스트림은 *바이트 단위* 이동
    * (아스키코드)영문/특수문자 1글자당 : 1바이트 , (유니코드)한글 1글자당 : 3바이트

[ 바이트 ] 컴퓨터가 처리하는 *용량 단위*
    1. 비트 : 0 또는 1
    2. 바이트 : 0 1 0 1 0 1 0 1 ( 8개 BIT -> 1BYTE)
    3. 8bit -> 1024byte -> 1024kbyte -> 1024mbyte ...

[ 파일 입출력 ] , 예외처리 무조건 발생한다.
    - 목적 : 자바내 모든 메모리는 영구저장 아니다. <휘발성메모리>
    1. FileOutputStream 클래스
        1) .write( 바이트배열 ) : 지정한 바이트 배열을 지정된 파일로 쓰기 함수
    2. FileInputStream 클래스
        1) .read( 바이트배열 ) : 지정한 바이트 배열에 읽어온 파일들을 저장 함수

[ 문자열 관련 메소드 ]
    1. "문자열".getBytes()          : 문자열을 바이트배열로 반환 함수
    2. new String( 바이트배열 )      : 바이트배열을 문자열로 반환 함수
    *3. "문자열".equals( "문자열" )   : 문자열 비교 결과 반환 함수






